import React, { useContext, useEffect, useState, useRef } from 'react';
import { Box, Text, Icon , Stack, Button, Wrap, Flex, Heading, Divider, useDisclosure, Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter } from '@chakra-ui/react'
import { Core } from '@pdftron/webviewer';
import { PeculiarFortifyCertificates } from '@peculiar/fortify-webcomponents-react';
import { WebViewerContext } from '../../context/WebViewerContext';
import * as x509 from "@peculiar/x509";

enum SigningMethod {
    Certificate = "Certificate", 
    Device =  "Device",
}
const HSMSigning = () => {
    const file = "digital_signature.pdf";
    const { instance } = useContext(WebViewerContext);
    const { isOpen, onOpen, onClose } = useDisclosure()
    const [signingMethod, setSigningMethod] = useState<SigningMethod>();

    useEffect(() =>{
        if(!instance.Core) return;
        instance.UI.loadDocument(`/files/${file}`);


    },[instance]);

    const signWithCertificate = async (document: Core.PDFNet.PDFDoc, privateCertificateBuffer: ArrayBuffer | Uint8Array, password: string) => {
        const { documentViewer, PDFNet } = instance.Core;
        const { DigitalSignatureField } = PDFNet;

        const sigHandlerId = await document.addStdSignatureHandlerFromBuffer(privateCertificateBuffer, password);
        const signature_field = await document.getField("SignatureFormField 1");
        const digital_signature_field = await DigitalSignatureField.createFromField(signature_field);

        await digital_signature_field.setLocation("Vancouver, BC");
        await digital_signature_field.setReason("Document approval.");
        await digital_signature_field.setContactInfo("www.pdftron.com");

        await digital_signature_field.signOnNextSaveWithCustomHandler(sigHandlerId);

        const buf = await document.saveMemoryBuffer(0);
        const blob = new Blob([buf], { type: 'application/pdf' });
        instance.UI.loadDocument(blob)
    }

    const handleContinue = async (event: any) => {
        const { documentViewer, PDFNet } = instance.Core;

        await PDFNet.initialize();

        var provider = await event.detail.socketProvider.getCrypto(event.detail.providerId);
        provider.sign = provider.subtle.sign.bind(provider.subtle);

        var cert = await provider.certStorage.getItem(event.detail.certificateId);
        var privateKey = await provider.keyStorage.getItem(event.detail.privateKeyId);
        var certRawData = await provider.certStorage.exportCert('raw', cert);

        const keys = await provider.certStorage.keys();
        let x509Key;

        for (const key of keys) {
            console.log(key);

            if (key.startsWith("x509-")) {
                x509Key = key;
                break;
            }
        }

        const raw = await provider.certStorage.getValue(x509Key);

        console.log("Raw",raw);
        console.log("Private Key:", privateKey)
        console.log("Cert raw data:", certRawData)
        console.log("Cert public:", cert.publicKey)

        const privateCertificate = new x509.X509Certificate(privateKey);
        const certificate = new x509.X509Certificate(certRawData);
        var encoder = new TextEncoder();

        const document = await documentViewer.getDocument().getPDFDoc();

        if(signingMethod == SigningMethod.Certificate){
           await signWithCertificate(document, encoder.encode(certificate.toString("pem")), "password");
        }
        console.log()
        return;
        /*
        
        const signer_cert = await X509Certificate.createFromBuffer(encoder.encode(x509Cert.toString("pem")))

        let document = await documentViewer.getDocument().getPDFDoc();
        let docbuf: Uint8Array;

        const signature_field = await document.getField("SignatureFormField 1");
        const digital_signature_field = await DigitalSignatureField.createFromField(signature_field);
        
        await digital_signature_field.createSigDictForCustomSigning(
            "Adobe.PPKLite",
            DigitalSignatureField.SubFilterType.e_adbe_pkcs7_detached,
            10000
        );

        docbuf = await document.saveMemoryBuffer(PDFNet.SDFDoc.SaveOptions.e_incremental);

        const pdf_digest = await digital_signature_field.calculateDigest(DigestAlgorithm.Type.e_SHA256);
        const pades_versioned_ess_signing_cert_attribute = await DigitalSignatureField.generateESSSigningCertPAdESAttribute(signer_cert, DigestAlgorithm.Type.e_SHA256);
        
        // generate the signedAttrs component of CMS
        const signed_attributes = await DigitalSignatureField.generateCMSSignedAttributes(pdf_digest, pades_versioned_ess_signing_cert_attribute);
        
        console.log("Sign digest")
        // Calculate the digest of the signedAttrs (i.e. not the PDF digest, this time).
        console.log("looged in:", await provider.isLoggedIn())
        if (!await provider.isLoggedIn()){
            await provider.login();
        }
        const signed_attributes_digest = await DigestAlgorithm.calculateDigest(DigestAlgorithm.Type.e_SHA256, signed_attributes);
        const signed_digest = await provider.subtle.sign("RSASSA-PKCS1-v1_5", privateKey, signed_attributes_digest.buffer);
        
        // Create the OIDs for the algorithms you have used.
        const digest_algorithm_oid = await ObjectIdentifier.createFromDigestAlgorithm(DigestAlgorithm.Type.e_SHA256);
        const signature_algorithm_oid = await ObjectIdentifier.createFromIntArray([1, 2, 840, 113549, 1, 1]);
        console.log("generate CMS")
        const cms_signature = await DigitalSignatureField.generateCMSSignature(signer_cert, [signer_cert], digest_algorithm_oid, signature_algorithm_oid, signed_digest, signed_attributes);
        console.log("Save")
        docbuf = await document.saveCustomSignatureBuffer(cms_signature, digital_signature_field);
   
        //const buf = await document.saveMemoryBuffer(0);
        const blob = new Blob([docbuf], { type: 'application/pdf' });
        instance.UI.loadDocument(blob)
        return;
        */

        //const blob = new Blob([docbuf], { type: 'application/pdf' });
        //instance.UI.loadDocument(docbuf)
    };

  return (
    <Box>
        <Stack spacing={'3'}>
            <Heading>HSM Signing</Heading>
            <Divider />
            <Text>(Add instructions).</Text>
            <Divider />

            <Button onClick={() => {
                setSigningMethod(SigningMethod.Certificate);
                onOpen();
            }}>Sign with Certificate</Button>

            <Button onClick={() => {
                setSigningMethod(SigningMethod.Device);
                onOpen();
            }}>Sign with Device</Button>
        </Stack>

        <Modal isOpen={isOpen} onClose={onClose} size={"xl"}>
            <ModalOverlay />
            <ModalContent>
                <ModalHeader>Select Certificate</ModalHeader>
                <ModalCloseButton />
                <ModalBody>
                <PeculiarFortifyCertificates
                    id="fortify-certificates-wc"
                    language="en"
                    hideFooter
                    filters={{ 
                        onlySmartcards: false, 
                        onlyWithPrivateKey: true,
                        keyUsage: ['digitalSignature']
                    }}
                    onSelectionSuccess={handleContinue}
                />
                </ModalBody>
                <ModalFooter>
                    <Button colorScheme='blue' mr={3} onClick={onClose}>Close</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>
    </Box>
  );
}

export default HSMSigning;